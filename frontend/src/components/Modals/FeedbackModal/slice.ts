/* eslint-disable no-param-reassign */
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../../redux/types';
import { TPoint } from '../../../types';
// import { fetchCount } from './counterAPI';

export interface FeedbackModalState {
  value: {
    isOpen: boolean;
    point: TPoint | null;
  };
  status: 'idle' | 'loading' | 'failed';
}

const initialState: FeedbackModalState = {
  value: {
    isOpen: false,
    point: null,
  },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   },
// );

export const feedbackModalSlice = createSlice({
  name: 'feedbackModal',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    openFeedbackModal: (state, action: PayloadAction<any>) => {
      state.value.isOpen = true;
      state.value.point = action.payload;
    },
    closeFeedbackModal: (state) => {
      state.value.isOpen = false;
      state.value.point = null;
    },
    updateFeedbackModal: (state, { payload }: PayloadAction<any>) => {
      state.value.point = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const {
  openFeedbackModal,
  closeFeedbackModal,
  updateFeedbackModal,
} = feedbackModalSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectFeedbackModal = (state: RootState) => state.feedbackModal.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export const feedbackModalReducer = feedbackModalSlice.reducer;
